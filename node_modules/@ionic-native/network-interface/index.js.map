{"version":3,"sources":["../../../src/@ionic-native/plugins/network-interface/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAExE;;;;;;;;;;;;;;;;;;;GAmBG;AASH;IAAsC,oCAAiB;IAAvD;;IAgCA,CAAC;IA7BC,uCAAY,GAAZ;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,2CAAgB,GAAhB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,8CAAmB,GAAnB;QACE,MAAM,CAAC;IACT,CAAC;IACI,2BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,+BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA5BA;QADC,OAAO,EAAE;;;;wDAGT;IAQD;QADC,OAAO,EAAE;;;;4DAGT;IAQD;QADC,OAAO,EAAE;;;;+DAGT;IAzBU,gBAAgB;QAR5B,MAAM,CAAC;YACN,UAAU,EAAE,kBAAkB;YAC9B,MAAM,EAAE,iCAAiC;YACzC,SAAS,EAAE,kBAAkB;YAC7B,IAAI,EAAE,6DAA6D;YACnE,SAAS,EAAE,CAAC,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,eAAe,CAAC;SACtF,CAAC;OAEW,gBAAgB,CAgC5B;IAAD,uBAAC;CAhCD,AAgCC,CAhCqC,iBAAiB,GAgCtD;SAhCY,gBAAgB","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n\n/**\n * @name Network Interface\n * @description\n * Network interface information plugin for Cordova/PhoneGap that supports Android, Blackberry 10, Browser, iOS, and Windows Phone 8.\n *\n * @usage\n * ```typescript\n * import { NetworkInterface } from '@ionic-native/network-interface';\n *\n *\n * constructor(private networkInterface: NetworkInterface) { }\n *\n * ...\n *\n * this.networkInterface.getWiFiIPAddress(function (ip) { alert(ip); });\n * this.networkInterface.getCarrierIPAddress(function (ip) { alert(ip); });\n *\n *\n * ```\n */\n@Plugin({\n  pluginName: 'NetworkInterface',\n  plugin: 'cordova-plugin-networkinterface',\n  pluginRef: 'networkinterface',\n  repo: 'https://github.com/salbahra/cordova-plugin-networkinterface',\n  platforms: ['Android', 'BlackBerry 10', 'Browser', 'iOS', 'Windows', 'Windows Phone'],\n})\n\nexport class NetworkInterface extends IonicNativePlugin {\n\n  @Cordova()\n  getIPAddress(): Promise<string> {\n    return;\n  }\n\n  /**\n   * Gets the WiFi IP address\n   * @param success {Function} Callback used when successful\n   * @param error {Function} Callback used when failure\n   */\n  @Cordova()\n  getWiFiIPAddress(): Promise<string> {\n    return;\n  }\n\n  /**\n   * Gets the wireless carrier IP address\n   * @param success {Function} Callback used when successful\n   * @param error {Function} Callback used when failure\n   */\n  @Cordova()\n  getCarrierIPAddress(): Promise<string> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}